[{"name": "app.py", "content": "# --------------------------------------------\n# Imports at the top - PyShiny EXPRESS VERSION\n# --------------------------------------------\n\nfrom shiny import reactive, render\nfrom shiny.express import ui, input\nimport random\nfrom datetime import datetime\nfrom faicons import icon_svg\nimport shinylive\nimport plotly.express as px\nimport pandas as pd\nfrom collections import deque\nimport shinyswatch\n\n# --------------------------------------------\n# SET UP THE REACTIVE CONTENT\n# --------------------------------------------\n\n# --------------------------------------------\n# PLANNING: We want to get a fake air quality reading and \n# Time stamp every N seconds.\n# For now, we'll avoid storage and just \n# Try to get the fake live data working and sketch our app.\n# ---------------------------------------------------------\n\n# --------------------------------------------\n# First, set a constant UPDATE INTERVAL for all live data\n# Constants are usually defined in uppercase letters\n# Use a type hint to make it clear that it's an integer (: int)\n# --------------------------------------------\nUPDATE_INTERVAL_SECS: int = 1\n# --------------------------------------------\n\n# Store the latest data up to the defined amount\nDEQUE_SIZE: int = 25\nreactive_value_wrapper = reactive.value(deque(maxlen=DEQUE_SIZE))\n\n# Initialize a REACTIVE CALC that our display components can call\n# to get the latest data and display it.\n# The calculation is invalidated every UPDATE_INTERVAL_SECS\n# to trigger updates.\n\n# It returns everything needed to display the data.\n# Very easy to expand or modify.\n# --------------------------------------------\nui.page_opts(theme=shinyswatch.theme.darkly)\n\n@reactive.calc()\ndef reactive_calc_combined():\n    # Invalidate this calculation every UPDATE_INTERVAL_SECS to trigger updates\n    reactive.invalidate_later(input.update_interval())\n\n    # Data generation logic. Get random air quality reading for PM2.5, rounded to 1 decimal place\n    pm25 = round(random.uniform(0, 55), 1)  # Replace range with realistic PM2.5 values\n\n    # Get a timestamp for \"now\" and use string format strftime() method to format it\n    timestamp = datetime.now().strftime(\"%Y-%m-%d %H:%M:%S\")\n\n    latest_dictionary_entry = {\"pm25\": pm25, \"timestamp\": timestamp}\n\n    reactive_value_wrapper.get().append(latest_dictionary_entry)    # Appends the latest dictionary entry to the deque\n    deque_snapshot = reactive_value_wrapper.get()                   # Gets a snapshot of the deque\n    df = pd.DataFrame(deque_snapshot)                               # Converts the deque to a pandas DataFrame\n        \n    return deque_snapshot, df, latest_dictionary_entry\n\n    # Return everything we need\n    return latest_dictionary_entry\n\n# ------------------------------------------------\n# Define the Shiny UI Page layout - Page Options\n# ------------------------------------------------\n\nui.div(\n    ui.h1(\"PyShiny Express: Live Air Quality Data\", class_=\"title\"), \n    style=\"display: flex; justify-content: space-between; align-items: center; width: 100%;\"\n),\nui.hr(),\n# ------------------------------------------------\n# Define the Shiny UI Page layout - Sidebar\n# ------------------------------------------------\n\nwith ui.sidebar(open=\"open\"):\n    ui.h2(\"Air Quality Monitor\", class_=\"text-center\")\n    ui.p(\n        \"A demonstration of real-time air quality readings.\",\n        class_=\"text-center\",\n    )\n    ui.hr()   \n    # Input for the update interval in seconds\n    ui.input_slider(\"update_interval\", \"Select Data Update Interval (seconds):\", min=1, max=30, value=3)\n    ui.hr()\n    ui.div(\n        ui.div(\n            icon_svg(\"cloud\"), \n            style=\"font-size: 30px; color: #3498db;\"  # Cloud icon styling\n        ),\n        ui.div(\n            \"Good Air Quality\", \n            style=\"font-size: 20px; color: #3498db;\"  # Text styling\n        ),\n        style=\"text-align: center; margin-top: 20px;\"  # Center both elements vertically\n    )\n\n    ui.div(\n        ui.div(\n            icon_svg(\"cloud\"), \n            style=\"font-size: 30px; color: #40916c;\"  # Cloud icon styling\n        ),\n        ui.div(\n            \"Moderate Air Quality\", \n            style=\"font-size: 20px; color: #40916c;\"  # Text styling\n        ),\n        style=\"text-align: center; margin-top: 20px;\"  # Center both elements vertically\n    )\n\n    ui.div(\n        ui.div(\n            icon_svg(\"cloud\"), \n            style=\"font-size: 30px; color: #fb8500;\"  # Cloud icon styling\n        ),\n        ui.div(\n            \"Unhealthy for Sensitive Groups\", \n            style=\"font-size: 20px; color: #fb8500;\"  # Text styling\n        ),\n        style=\"text-align: center; margin-top: 20px;\"  # Center both elements vertically\n    )\n    ui.div(\n        ui.div(\n            icon_svg(\"cloud\"), \n            style=\"font-size: 30px; color: #bf0603;\"  # Cloud icon styling\n        ),\n        ui.div(\n            \"Dangerous Air Quality\", \n            style=\"font-size: 20px; color: #bf0603;\"  # Text styling\n        ),\n        style=\"text-align: center; margin-top: 20px;\"  # Center both elements vertically\n    )\n#---------------------------------------------------------------------\n# In Shiny Express, everything not in the sidebar is in the main panel\n#---------------------------------------------------------------------\n\nwith ui.layout_columns():\n    \n    with ui.value_box(\n        showcase=icon_svg(\"cloud\"),\n        style=\"background-color: #000000\"\n        ):\n        ui.h2(\"Current PM2.5 Level\")\n\n        @render.ui\n        def display_pm25_colored():\n            deque_snapshot, df, latest_dictionary_entry = reactive_calc_combined()\n\n            # Get the PM2.5 value from the latest entry\n            pm25 = latest_dictionary_entry[\"pm25\"]\n\n            # Determine air quality category and color\n            if pm25 <= 12.0:\n                color = \"#3498db\"  # Good\n            elif pm25 <= 35.4:\n                color = \"#40916c\"  # Moderate\n            elif pm25 <= 55.4:\n                color = \"#fb8500\"  # Unhealthy for sensitive groups\n            else:\n                color = \"#bf0603\"  # Dangerous Air Quality\n\n            # Return the formatted div with the color and PM2.5 value\n            return ui.div(\n                f\"{pm25} \u00b5g/m\u00b3\",\n                style=f\"font-size: 2rem; font-weight: bold; color: {color};\",\n            )\n\n    with ui.value_box(\n        showcase=icon_svg(\"clock\"),\n        style=\"background-color: #000000\"\n        ):\n        ui.h2(\"Current Date and Time\")\n        @render.text\n        def display_time():\n            \"\"\"Get the latest reading and return a timestamp string\"\"\"\n            deque_snapshot, df, latest_dictionary_entry = reactive_calc_combined()\n            return f\"{latest_dictionary_entry['timestamp']}\"\n\nui.p(\"Note:  PM2.5 Values may vary based on conditions.\")\n\nui.hr()\n\n\n    \n\nwith ui.navset_card_tab(id=\"tab\"):\n    with ui.nav_panel(\"Live Air Quality Readings\"):\n    \n        @render.data_frame\n        def display_df():\n            \"\"\"Get the latest reading and return a dataframe with current readings\"\"\"\n            # Retrieve the DataFrame\n            _, df, _ = reactive_calc_combined()\n            \n            # Rename columns for better readability\n            df = df.rename(columns={\"pm25\": \"PM2.5 Levels\", \"timestamp\": \"Timestamp\"})\n            \n            # Adjust pandas display options for better formatting\n            pd.set_option('display.width', None)  # Use maximum width\n\n            # Render the data frame as a DataGrid component\n            return render.DataGrid(df, width=\"50%\")\n\n    with ui.nav_panel(\"PM2.5 Scatter Plot\"):\n        @render.ui\n        def plot():\n            \"\"\"Render scatter plot of the last 15 air quality readings.\"\"\"\n            # Retrieve the DataFrame and keep only the last 15 rows\n            _, df, _ = reactive_calc_combined()\n            df = df.tail(15)\n\n            # Rename columns for readability in the plot\n            df = df.rename(columns={\"pm25\": \"PM2.5 Levels\", \"timestamp\": \"Timestamp\"})\n\n            # Determine air quality category and color for each reading\n            def get_color(pm25):\n                if pm25 <= 12.0:\n                    return \"#3498db\"  # Good\n                elif pm25 <= 35.4:\n                    return \"#40916c\"  # Moderate\n                elif pm25 <= 55.4:\n                    return \"#fb8500\"  # Unhealthy for sensitive groups\n                else:\n                    return \"#bf0603\"  # Dangerous Air Quality\n\n            # Apply the color function to the DataFrame\n            df['Color'] = df['PM2.5 Levels'].apply(get_color)\n\n            # Generate scatter plot using the 'Color' column for marker color\n            fig = px.scatter(\n                data_frame=df,\n                x=\"PM2.5 Levels\",\n                y=\"Timestamp\",\n                title=\"Air Quality Levels\",\n                labels={\"PM2.5 Levels\": \"PM2.5 Levels (\u00b5g/m\u00b3)\", \"Timestamp\": \"Date\"},\n                color='Color',  # Use the 'Color' column for point color\n                color_discrete_map={\n                    \"#3498db\": \"#3498db\",  # Good\n                    \"#40916c\": \"#40916c\",  # Moderate\n                    \"#fb8500\": \"#fb8500\",  # Unhealthy for sensitive groups\n                    \"#bf0603\": \"#bf0603\"   # Dangerous Air Quality\n                }\n            ).update_layout(\n                title={\"text\": \"PM2.5 Readings over Time\", \"x\": 0.5},\n                yaxis_title=\"Timestamp\",\n                xaxis=dict(\n                    title=\"PM2.5 Level (\u00b5g/m\u00b3)\",  # Combine xaxis_title here\n                    range=[0, 55],  # Set the x-axis range from 0 to 55 \u00b5g/m\u00b3\n                    gridcolor='grey',  # Set x-axis grid lines to grey\n                    zerolinecolor='grey'  # Set x-axis zero line to grey\n                ),\n                height=500,  # Set a fixed height for the graph\n                plot_bgcolor=\"rgba(0, 0, 0, 0)\",  # Make the plot background transparent\n                paper_bgcolor=\"rgba(0, 0, 0, 0)\",  # Make the paper (outside the plot) background transparent\n                font=dict(color=\"white\"),  # Set all text color to white\n                yaxis=dict(\n                    gridcolor='grey',  # Set y-axis grid lines to grey\n                    zerolinecolor='grey',  # Set y-axis zero line to grey\n                ),\n                showlegend=False  # Disable the legend\n            ).update_traces(marker=dict(size=9))\n            \n\n            return fig", "type": "text"}]